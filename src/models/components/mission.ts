/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import {
  Astronaut,
  Astronaut$inboundSchema,
  Astronaut$Outbound,
  Astronaut$outboundSchema,
} from "./astronaut.js";

export const Status = {
  Planned: "planned",
  Ongoing: "ongoing",
  Completed: "completed",
} as const;
export type Status = ClosedEnum<typeof Status>;

export type Mission = {
  id: string;
  name: string;
  status: Status;
  launchDate?: Date | undefined;
  crew?: Array<Astronaut> | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const Mission$inboundSchema: z.ZodType<Mission, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    name: z.string(),
    status: Status$inboundSchema,
    launchDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    crew: z.array(Astronaut$inboundSchema).optional(),
  });

/** @internal */
export type Mission$Outbound = {
  id: string;
  name: string;
  status: string;
  launchDate?: string | undefined;
  crew?: Array<Astronaut$Outbound> | undefined;
};

/** @internal */
export const Mission$outboundSchema: z.ZodType<
  Mission$Outbound,
  z.ZodTypeDef,
  Mission
> = z.object({
  id: z.string(),
  name: z.string(),
  status: Status$outboundSchema,
  launchDate: z.date().transform(v => v.toISOString()).optional(),
  crew: z.array(Astronaut$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mission$ {
  /** @deprecated use `Mission$inboundSchema` instead. */
  export const inboundSchema = Mission$inboundSchema;
  /** @deprecated use `Mission$outboundSchema` instead. */
  export const outboundSchema = Mission$outboundSchema;
  /** @deprecated use `Mission$Outbound` instead. */
  export type Outbound = Mission$Outbound;
}
